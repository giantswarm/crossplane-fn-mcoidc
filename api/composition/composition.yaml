apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: mcoidc-composition
spec:
  compositeTypeRef:
    apiVersion: crossplane.giantswarm.io/v1
    kind: MCOIDC
  mode: Pipeline
  pipeline:
  - step: mcoidc-discovery
    functionRef:
      name: function-mcoidc
    input:
      apiVersion: mcoidc.fn.giantswarm.io
      kind: Input
      metadata:
        namespace: crossplane
      spec:
        domainRef: spec.domain
        regionRef: spec.region
        providerConfigRef: spec.providerConfigRef
        route53HostedZonePatchToRef: status.importResources.route53ZoneId
        s3KeysPatchToRef: status.s3Keys
        s3DiscoveryPatchToRef: status.s3Discovery
        s3BucketNameRef: spec.bucketName
  - step: render-resources
    functionRef:
      name: function-kcl
    input:
      apiVersion: krm.kcl.dev/v1alpha1
      kind: KCLRun
      metadata:
        name: mcoidc
      spec:
        target: Resources
        source: |
          # IRSA composition rendered via KCL for Crossplane
          # This script is designed to be used by the crossplane-contrib/function-kcl
          # function. It reads the incoming IRSA composite resource (XR) and produces
          # the managed resources required to implement the IRSA stack, while also
          # patching status fields back onto the XR.

          # ---------------------------------------------------------------------------
          # Input shorthands
          # ---------------------------------------------------------------------------
          oxr  = option("params")?.oxr          # Observed  Composite Resource (XR)
          dxr  = option("params")?.dxr          # Desired   Composite Resource (XR)
          ocds = option("params")?.ocds or {}   # Observed  Composed Resources map

          # ---------------------------------------------------------------------------
          # Common variables extracted from the XR                                                       
          # ---------------------------------------------------------------------------
          composition_name = oxr?.metadata?.name or ""
          region        = oxr?.spec?.region or ""
          bucket_name   = oxr?.spec?.bucketName or ""
          domain        = oxr?.spec?.domain or ""
          provider_cfg  = oxr?.spec?.providerConfigRef or ""
          # Whether the deployment region is in mainland China (e.g. cn-north-1, cn-northwest-1)
          is_china_region = region.startswith("cn-")

          # ---------------------------------------------------------------------------
          # Existing resources status
          # ---------------------------------------------------------------------------
          existing_cloudfront_id = oxr?.status?.importResources?.cloudfrontDistributionId or ""
          existing_oidc_id = oxr?.status?.importResources?.openIdProviderArn or ""
          existing_route53_id = oxr?.status?.importResources?.route53ZoneId or ""

          # ---------------------------------------------------------------------------
          # Managed resources
          # ---------------------------------------------------------------------------
          
          # OpenID Connect Provider
          _oidc_client_id_list = ["sts.amazonaws.com"]
          _oidc_thumbprint_list = ["06b25927c42a721631c1efd9431e648fa62e1e39"]
          _oidc_url = "https://irsa.${domain}"
          if is_china_region:
            _oidc_client_id_list = ["sts.amazonaws.com.cn"]
            _oidc_thumbprint_list = ["9e99a48a9960b14926bb7f3b02e22da2b0ab7280"]
            _oidc_url = "https://s3.${region}.amazonaws.com.cn/${bucket_name}"

          _oidc_provider = {
              apiVersion = "iam.aws.upbound.io/v1beta1"
              kind       = "OpenIDConnectProvider"
              metadata.name = "${composition_name}-oidc"
              metadata.annotations = {}
              spec = {
                  providerConfigRef.name = provider_cfg
                  forProvider = {
                      url            = _oidc_url
                      clientIdList   = _oidc_client_id_list
                      thumbprintList = _oidc_thumbprint_list
                  }
              }
          }
          if existing_oidc_id != "":
            _oidc_provider.metadata.annotations = {
                "crossplane.io/external-name" = existing_oidc_id
            }

          # S3 Bucket
          s3_bucket = {
              apiVersion = "s3.aws.upbound.io/v1beta1"
              kind       = "Bucket"
              metadata.name = bucket_name
              spec = {
                  providerConfigRef.name = provider_cfg
                  forProvider.region     = region
              }
          }

          # Bucket object: OIDC discovery doc
          s3_discovery = {
              apiVersion = "s3.aws.upbound.io/v1beta1"
              kind       = "BucketObject"
              metadata.name = "${composition_name}-discovery"
              spec = {
                  providerConfigRef.name = provider_cfg
                  forProvider = {
                      bucketRef.name = bucket_name
                      key            = ".well-known/openid-configuration"
                      contentType    = "application/json"
                      region         = region
                      contentBase64  = oxr?.status?.s3Discovery or ""
                  }
              }
          }

          # Bucket object: JWKS keys
          s3_keys = {
              apiVersion = "s3.aws.upbound.io/v1beta1"
              kind       = "BucketObject"
              metadata.name = "${composition_name}-keys"
              spec = {
                  providerConfigRef.name = provider_cfg
                  forProvider = {
                      bucketRef.name = bucket_name
                      key            = "keys.json"
                      contentType    = "application/json"
                      region         = region
                      contentBase64  = oxr?.status?.s3Keys or ""
                  }
              }
          }
          
          bucket_arn  = option("params")?.ocds?[bucket_name]?.Resource?.status?.atProvider?.arn or ""
          if not is_china_region:
            # S3 Bucket Policy (depends on OAI and bucket status)
            oai_arn     = option("params")?.ocds?[oai_name]?.Resource?.status?.atProvider?.iamArn or ""
            _policy_json = ""
            if oai_arn != "" and bucket_arn != "":
                _policy_json = """{
                    \"Version\": \"2012-10-17\",
                    \"Id\": \"PolicyForCloudFrontPrivateContent\",
                    \"Statement\": [
                        {
                            \"Effect\": \"Allow\",
                            \"Principal\": {\"AWS\": \"${oai_arn}\"},
                            \"Action\": \"s3:GetObject\",
                            \"Resource\": \"${bucket_arn}/*\"
                        }
                    ]
                }"""
          else:
            # S3 Bucket Policy for China regions (no OAI, public access block)
            _policy_json = """{
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": "*",
                        "Action": ["s3:GetObject"],
                        "Resource": "${bucket_arn}/*"
                    }
                ]
            }"""
          
          s3_bucket_policy = {
              apiVersion = "s3.aws.upbound.io/v1beta1"
              kind       = "BucketPolicy"
              metadata.name = "${composition_name}-policy"
              spec = {
                  providerConfigRef.name = provider_cfg
                  forProvider = {
                      bucketRef.name = bucket_name
                      region         = region
                      policy         = _policy_json
                  }
              }
          }

          if is_china_region:
            s3_bucket_public_access_block = {
              apiVersion = "s3.aws.upbound.io/v1beta1"
              kind       = "BucketPublicAccessBlock"
              metadata.name = "${composition_name}-public-access-block"
              spec = {
                providerConfigRef.name = provider_cfg
                forProvider = {
                  bucketRef.name = bucket_name
                  region = region
                  blockPublicAcls: False
                  blockPublicPolicy: False
                  ignorePublicAcls: False
                  restrictPublicBuckets: False
                }
              }
            }

            s3_bucket_ownership = {
              apiVersion = "s3.aws.upbound.io/v1beta1"
              kind       = "BucketOwnershipControls"
              metadata.name = "${composition_name}-ownership"
              spec = {
                providerConfigRef.name = provider_cfg
                forProvider = {
                  bucketRef.name = bucket_name
                  region = region
                  rule = [
                    {
                      objectOwnership = "ObjectWriter"
                    }
                  ]
                }
              }
            }

          # CloudFront Origin Access Identity (OAI)
          oai_name = "${composition_name}-irsa-s3-origin-access-identity"
          cloudfront_oai = {
              apiVersion = "cloudfront.aws.upbound.io/v1beta1"
              kind       = "OriginAccessIdentity"
              metadata.name = oai_name
              spec = {
                  providerConfigRef.name = provider_cfg
                  forProvider = {
                      comment = "${composition_name} OAI for IRSA S3 bucket"
                      region  = region
                  }
              }
          } 

          # ACM Certificate (us-east-1 for CloudFront)
          acm_certificate = {
              apiVersion = "acm.aws.upbound.io/v1beta1"
              kind       = "Certificate"
              metadata.name = "${composition_name}-irsa-cloudfront-certificate"
              spec = {
                  providerConfigRef.name = provider_cfg
                  forProvider = {
                      validationMethod = "DNS"
                      region           = "us-east-1"
                      domainName       = "irsa.${domain}"
                  }
              }
          }  
          # Validation Route53 record for the ACM certificate
          cert_status = option("params")?.ocds?["${composition_name}-irsa-cloudfront-certificate"]?.Resource?.status or {}
          cert_val = {
              recordName  = cert_status?.atProvider?.domainValidationOptions?[0]?.resourceRecordName
              recordValue = cert_status?.atProvider?.domainValidationOptions?[0]?.resourceRecordValue
              recordType  = cert_status?.atProvider?.domainValidationOptions?[0]?.resourceRecordType
          }  
          validation_record = {
              apiVersion = "route53.aws.upbound.io/v1beta1"
              kind       = "Record"
              metadata.name = "${composition_name}-validation"
              spec = {
                  providerConfigRef.name = provider_cfg
                  forProvider = {
                      allowOverwrite = True
                      ttl            = 300
                      name           = cert_val.recordName
                      records        = [cert_val.recordValue]
                      type           = cert_val.recordType
                      zoneId         = existing_route53_id
                      region         = region
                  }
              }
          }  
          # CloudFront Distribution
          cf_name   = "${composition_name}-irsa-cloudfront-distribution"
          oai_path     = option("params")?.ocds?[oai_name]?.Resource?.status?.atProvider?.cloudfrontAccessIdentityPath or ""
          _cf_dist = {
              apiVersion = "cloudfront.aws.upbound.io/v1beta2"
              kind       = "Distribution"
              metadata.name = cf_name
              metadata.annotations = {}
              spec = {
                  providerConfigRef.name = provider_cfg
                  forProvider = {
                      enabled            = True
                      defaultRootObject  = "index.html"
                      region             = region
                      origin = [{
                          domainName       = "${bucket_name}.s3.${region}.amazonaws.com"
                          originId         = bucket_name
                          s3OriginConfig = {
                              originAccessIdentity = oai_path
                          }
                      }]
                      aliases = [ "irsa.${domain}" ]
                      restrictions = {
                          geoRestriction = {
                              restrictionType = "none"
                          }
                      }
                      defaultCacheBehavior = {
                          allowedMethods       = ["GET", "HEAD"]
                          cachedMethods        = ["GET", "HEAD"]
                          viewerProtocolPolicy = "redirect-to-https"
                          forwardedValues = {
                              cookies = { forward = "none" }
                          }
                          targetOriginId = bucket_name
                      }
                      viewerCertificate = {
                          acmCertificateArn    = cert_status?.atProvider?.arn or ""
                          sslSupportMethod     = "sni-only"
                          minimumProtocolVersion = "TLSv1.2_2021"
                      }
                  }
              }
          }
          if existing_cloudfront_id != "":
              _cf_dist.metadata.annotations = {
                  "crossplane.io/external-name" = existing_cloudfront_id
              }

          # Route53 record for IRSA CNAME
          cloudfront_domain = option("params")?.ocds?[cf_name]?.Resource?.status?.atProvider?.domainName
          irsa_record = {
              apiVersion = "route53.aws.upbound.io/v1beta1"
              kind       = "Record"
              metadata.name = "${composition_name}-irsa-cname"
              spec = {
                  providerConfigRef.name = provider_cfg
                  forProvider = {
                      allowOverwrite = True
                      type           = "CNAME"
                      ttl            = 300
                      name           = "irsa.${domain}"
                      records        = [cloudfront_domain]
                      zoneId         = existing_route53_id
                      region         = region
                  }
              }
          }

          # Always include core IAM/S3 resources. Append CloudFront stack only for non-China regions.
          _resources = []

          if not is_china_region:
            _resources = [
              cloudfront_oai,
              acm_certificate,
              validation_record,
              _cf_dist,
              irsa_record,            
              _oidc_provider,
              s3_bucket,
              s3_discovery,
              s3_keys,
              s3_bucket_policy,
            ]
          else:
            _resources = [
              _oidc_provider,
              s3_bucket,
              s3_bucket_policy,
              s3_bucket_public_access_block,
              s3_bucket_ownership,
              s3_discovery,
              s3_keys,
            ]
          items = _resources

  - step: automatically-detect-ready-composed-resources
    functionRef:
      name: function-auto-ready
